/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTIDDSConnector {
    _unused: [u8; 0],
}
pub type RTI_Connector = RTIDDSConnector;
unsafe extern "C" {
    #[doc = " Get the number of samples available in the data reader specified by\n entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n @param[out] value The number of samples available.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist."]
    pub fn RTI_Connector_get_sample_count(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the value of a JSON field from the info data associated with the\n specified sample in the data reader specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[out] return_value The value of the JSON field. 1 (true) or 0 (false).\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[in] name The name of the JSON field.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the field does not exist."]
    pub fn RTI_Connector_get_boolean_from_infos(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut ::std::os::raw::c_int,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set the value of a data writer specified by entity_name from a JSON string.\n\n The JSON string must contain a valid JSON object with the same structure as\n the data type associated with the data writer.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data writer.\n @param[in] json The JSON string containing the value to be set.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist or\n         if the JSON string is invalid."]
    pub fn RTI_Connector_set_json_instance(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        json: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set the value of a boolean field in the data writer specified by\n entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data writer.\n @param[in] name The name of the field to be set.\n @param[in] value The value to be set.  Non-zero values are considered true,\n                   zero values are considered false.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist,\n         the field does not exist, or the field is not a boolean."]
    pub fn RTI_Connector_set_boolean_into_samples(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set the value of a number field in the data writer specified by\n entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data writer.\n @param[in] name The name of the field to be set.\n @param[in] value The value to be set.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist,\n         the field does not exist, or the field is not a number."]
    pub fn RTI_Connector_set_number_into_samples(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set the value of a string field in the data writer specified by\n entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data writer.\n @param[in] name The name of the field to be set.\n @param[in] value The value to be set.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist,\n         the field does not exist, or the field is not a string."]
    pub fn RTI_Connector_set_string_into_samples(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the value of a JSON field from the info data associated with the\n specified sample in the data reader specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[in] name The name of the JSON field.\n @param[out] value The value of the JSON field.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the field does not exist."]
    pub fn RTI_Connector_get_json_from_infos(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the JSON representation of the specified sample in the data reader\n specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[out] json_str The JSON representation of the sample.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the sample does not exist."]
    pub fn RTI_Connector_get_json_sample(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the JSON representation of the specified member in the specified sample\n in the data reader specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[in] member_name The name of the member to be retrieved.\n @param[out] json_str The JSON representation of the member.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the member does not exist."]
    pub fn RTI_Connector_get_json_member(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        member_name: *const ::std::os::raw::c_char,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Clear all samples from the data reader specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist."]
    pub fn RTI_Connector_clear(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Read new samples from the data reader specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist."]
    pub fn RTI_Connector_read(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Take new samples from the data reader specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data reader.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist."]
    pub fn RTI_Connector_take(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Write data to the data writer specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data writer.\n @param[in] params_json The JSON string containing the data to be written.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist."]
    pub fn RTI_Connector_write(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        params_json: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTI_Connector_Options {
    pub enable_on_data_event: ::std::os::raw::c_int,
    pub one_based_sequence_indexing: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RTI_Connector_Options"][::std::mem::size_of::<RTI_Connector_Options>() - 8usize];
    ["Alignment of RTI_Connector_Options"]
        [::std::mem::align_of::<RTI_Connector_Options>() - 4usize];
    ["Offset of field: RTI_Connector_Options::enable_on_data_event"]
        [::std::mem::offset_of!(RTI_Connector_Options, enable_on_data_event) - 0usize];
    ["Offset of field: RTI_Connector_Options::one_based_sequence_indexing"]
        [::std::mem::offset_of!(RTI_Connector_Options, one_based_sequence_indexing) - 4usize];
};
unsafe extern "C" {
    pub fn RTI_Connector_new(
        config_name: *const ::std::os::raw::c_char,
        config_file: *const ::std::os::raw::c_char,
        options: *const RTI_Connector_Options,
    ) -> *mut RTI_Connector;
}
unsafe extern "C" {
    pub fn RTI_Connector_delete(self_: *mut RTI_Connector);
}
unsafe extern "C" {
    #[doc = " Get the value of a number field from the specified sample in the data reader\n specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[out] return_value The value of the number field.\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[in] name The name of the field to be retrieved.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the field does not exist."]
    pub fn RTI_Connector_get_number_from_sample(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut f64,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the value of a boolean field from the specified sample in the data reader\n specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[out] return_value The value of the boolean field.  Non-zero values are\n                          considered true, zero values are considered false.\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[in] name The name of the field to be retrieved.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the field does not exist."]
    pub fn RTI_Connector_get_boolean_from_sample(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut ::std::os::raw::c_int,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the value of a string field from the specified sample in the data reader\n specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[out] return_value The value of the string field.\n @param[in] entity_name The name of the data reader.\n @param[in] index The index of the sample.\n @param[in] name The name of the field to be retrieved.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist,\n         the sample index is out of range, or the field does not exist."]
    pub fn RTI_Connector_get_string_from_sample(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut *mut ::std::os::raw::c_char,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Clear the value of a member in the data writer specified by entity_name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the data writer.\n @param[in] name The name of the member to be cleared.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist,\n         the member does not exist, or the member is not a primitive type."]
    pub fn RTI_Connector_clear_member(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Returns the DDS_DynamicDataReader associated with the given entity name.\n\n \\param[in] self The RTI_Connector instance.\n \\param[in] entity_name The name of the entity.\n \\returns The DDS_DynamicDataReader associated with the entity."]
    pub fn RTI_Connector_get_datareader(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Returns the DDS_DynamicDataWriter associated with the given entity name.\n\n \\param[in] self The RTI_Connector instance.\n \\param[in] entity_name The name of the entity.\n \\returns The DDS_DynamicDataWriter associated with the entity."]
    pub fn RTI_Connector_get_datawriter(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " Returns the native DDS_DynamicData sample associated with the given index\n for the given entity name.\n\n \\param[in] self The RTI_Connector instance.\n \\param[in] entity_name The name of the entity.\n \\param[in] index The index of the sample.\n \\returns The native DDS_DynamicData sample associated with the entity."]
    pub fn RTI_Connector_get_native_sample(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn RTI_Connector_wait_for_data(
        self_: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Waits for data to arrive on the given reader, or for the timeout period to\n elapse.\n\n \\param[in] self The RTI_Connector instance.\n \\param[in] ms_timeout The timeout period in milliseconds.  A value of 0\n                       indicates that the function should not block.\n \\returns 0 on success, or RTI_CONNECTOR_ERROR if an error occurred."]
    pub fn RTI_Connector_wait_for_data_on_reader(
        self_: *mut ::std::os::raw::c_void,
        ms_timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Waits for the number of acknowledgments for the given writer to change, and\n returns the new count.\n\n \\param[in] writer The RTI_Connector data writer instance.\n \\param[in] timeout The maximum time to wait in milliseconds.\n \\returns The new count of acknowledgments, or RTI_CONNECTOR_ERROR if an error\n          occurred."]
    pub fn RTI_Connector_wait_for_acknowledgments(
        writer: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Waits for the number of matched publications for the given reader to\n change, and returns the new count.\n\n \\param[in] reader The RTI_Connector data reader instance.\n \\param[in] ms_timeout The maximum time to wait in milliseconds.\n \\param[out] current_count_change The new number of matched publications.\n\n \\return 0 on success, or RTI_CONNECTOR_ERROR if the data reader does not exist\n         or if the wait timed out."]
    pub fn RTI_Connector_wait_for_matched_publication(
        reader: *mut ::std::os::raw::c_void,
        ms_timeout: ::std::os::raw::c_int,
        current_count_change: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Waits for the number of matched subscriptions for the given writer to\n change, and returns the new count.\n\n \\param[in] writer The RTI_Connector data writer instance.\n \\param[in] ms_timeout The maximum time to wait in milliseconds.\n \\param[out] current_count_change The new number of matched subscriptions.\n\n \\return 0 on success, or RTI_CONNECTOR_ERROR if the data writer does not exist\n         or if the wait timed out."]
    pub fn RTI_Connector_wait_for_matched_subscription(
        writer: *mut ::std::os::raw::c_void,
        ms_timeout: ::std::os::raw::c_int,
        current_count_change: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Gets a JSON string containing the matched subscriptions of the given writer.\n\n The JSON string contains a list of subscriptions, where each subscription is a\n JSON object with the following properties:\n\n - \"participant_guid\": The GUID of the participant that owns the subscription.\n - \"subscription_name\": The name of the subscription.\n - \"topic_name\": The name of the topic associated with the subscription.\n\n @param[in] writer The RTI_Connector instance.\n @param[out] json_str The JSON string containing the matched subscriptions.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the writer does not exist."]
    pub fn RTI_Connector_get_matched_subscriptions(
        writer: *mut ::std::os::raw::c_void,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Gets a JSON string containing the matched publications of the given reader.\n\n The JSON string contains a list of publications, where each publication is a\n JSON object with the following properties:\n\n - \"participant_guid\": The GUID of the participant that owns the publication.\n - \"publication_name\": The name of the publication.\n - \"topic_name\": The name of the topic associated with the publication.\n\n @param[in] reader The RTI_Connector instance.\n @param[out] json_str The JSON string containing the matched publications.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the reader does not exist."]
    pub fn RTI_Connector_get_matched_publications(
        reader: *mut ::std::os::raw::c_void,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RTI_Connector_get_last_error_message() -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " Gets the native DDS_DynamicData instance associated with the given entity name.\n\n @param[in] self The RTI_Connector instance.\n @param[in] entity_name The name of the entity.\n @param[out] native_pointer The native DDS_DynamicData instance associated with the entity.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the entity does not exist."]
    pub fn RTI_Connector_get_native_instance(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        native_pointer: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RTI_Connector_free_string(str_: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[doc = " Set the maximum number of objects that can be concurrently accessed by\n the thread.\n\n @param[in] value The maximum number of objects that can be concurrently\n                  accessed by the thread.\n\n @return 0 on success, or RTI_CONNECTOR_ERROR if the value is invalid."]
    pub fn RTI_Connector_set_max_objects_per_thread(
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
