/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTIDDSConnector {
    _unused: [u8; 0],
}
pub type RTI_Connector = RTIDDSConnector;
extern "C" {
    pub fn RTI_Connector_get_sample_count(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        value: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_boolean_from_infos(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut ::std::os::raw::c_int,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_set_json_instance(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        json: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_set_boolean_into_samples(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_set_number_into_samples(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_set_string_into_samples(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_json_from_infos(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_json_sample(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_json_member(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        member_name: *const ::std::os::raw::c_char,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_clear(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_read(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_take(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_write(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        params_json: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTI_Connector_Options {
    pub enable_on_data_event: ::std::os::raw::c_int,
    pub one_based_sequence_indexing: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_RTI_Connector_Options() {
    const UNINIT: ::std::mem::MaybeUninit<RTI_Connector_Options> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTI_Connector_Options>(),
        8usize,
        concat!("Size of: ", stringify!(RTI_Connector_Options))
    );
    assert_eq!(
        ::std::mem::align_of::<RTI_Connector_Options>(),
        4usize,
        concat!("Alignment of ", stringify!(RTI_Connector_Options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_on_data_event) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTI_Connector_Options),
            "::",
            stringify!(enable_on_data_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).one_based_sequence_indexing) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTI_Connector_Options),
            "::",
            stringify!(one_based_sequence_indexing)
        )
    );
}
extern "C" {
    pub fn RTI_Connector_new(
        config_name: *const ::std::os::raw::c_char,
        config_file: *const ::std::os::raw::c_char,
        options: *const RTI_Connector_Options,
    ) -> *mut RTI_Connector;
}
extern "C" {
    pub fn RTI_Connector_delete(self_: *mut RTI_Connector);
}
extern "C" {
    pub fn RTI_Connector_get_number_from_sample(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut f64,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_boolean_from_sample(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut ::std::os::raw::c_int,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_string_from_sample(
        self_: *mut ::std::os::raw::c_void,
        return_value: *mut *mut ::std::os::raw::c_char,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_clear_member(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_datareader(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn RTI_Connector_get_datawriter(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn RTI_Connector_get_native_sample(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn RTI_Connector_wait_for_data(
        self_: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_wait_for_data_on_reader(
        self_: *mut ::std::os::raw::c_void,
        ms_timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_wait_for_acknowledgments(
        writer: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_wait_for_matched_publication(
        reader: *mut ::std::os::raw::c_void,
        ms_timeout: ::std::os::raw::c_int,
        current_count_change: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_wait_for_matched_subscription(
        writer: *mut ::std::os::raw::c_void,
        ms_timeout: ::std::os::raw::c_int,
        current_count_change: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_matched_subscriptions(
        writer: *mut ::std::os::raw::c_void,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_matched_publications(
        reader: *mut ::std::os::raw::c_void,
        json_str: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_get_last_error_message() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn RTI_Connector_get_native_instance(
        self_: *mut ::std::os::raw::c_void,
        entity_name: *const ::std::os::raw::c_char,
        native_pointer: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RTI_Connector_free_string(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn RTI_Connector_set_max_objects_per_thread(
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
